<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>can</title>
  <subtitle>Writing code is keep my heart beating only reason.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/can829/"/>
  <updated>2017-07-21T10:47:02.687Z</updated>
  <id>https://github.com/can829/</id>
  
  <author>
    <name>can</name>
    <email>2740327254@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>html学习导向图</title>
    <link href="https://github.com/can829/2017/07/21/html%E5%AD%A6%E4%B9%A0%E5%AF%BC%E5%90%91%E5%9B%BE/"/>
    <id>https://github.com/can829/2017/07/21/html学习导向图/</id>
    <published>2017-07-21T10:41:22.000Z</published>
    <updated>2017-07-21T10:47:02.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="html学习导向图"><a href="#html学习导向图" class="headerlink" title="html学习导向图"></a>html学习导向图</h1><a id="more"></a>
<p><img src="/images/html.png" alt="“html学习导向图”"> </p>
<p><a href="2740327254@qq.com">个人见解，仅供参考，如有错误，欢迎指正)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;html学习导向图&quot;&gt;&lt;a href=&quot;#html学习导向图&quot; class=&quot;headerlink&quot; title=&quot;html学习导向图&quot;&gt;&lt;/a&gt;html学习导向图&lt;/h1&gt;
    
    </summary>
    
    
      <category term="html" scheme="https://github.com/can829/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>多线程的创建和启动</title>
    <link href="https://github.com/can829/2017/07/19/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%90%AF%E5%8A%A8/"/>
    <id>https://github.com/can829/2017/07/19/多线程的创建和启动/</id>
    <published>2017-07-19T13:26:58.000Z</published>
    <updated>2017-07-21T10:46:55.816Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="线程和进程的概念"><a href="#线程和进程的概念" class="headerlink" title="线程和进程的概念"></a>线程和进程的概念</h2><p>了解多线程，首先我们需要了解什么是线程和进程。<br>进程：所有运行中的任务通常对应一个进程，一个进程里面最少有一个线程(主线程main)，<br>线程：进程的执行单元。在进程内，创建多条顺序执行流，这些顺序执行流就是线程，每个线程也是相互独立的。<br>    线程在程序中是独立的，并发的执行流。(并发性：指的是同一时刻只能有一条指令执行。<br>    并行性：指的是同一时刻，有多条指令在多个处理器上同时执行)<br>个人理解：一个QQ的运行是一个进程的运行，然后你在刷空间的时候可以听到背景音乐，就是多个线程在执行。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><hr>
<h2 id="继承Thread类创建线程类，启动多线程："><a href="#继承Thread类创建线程类，启动多线程：" class="headerlink" title="继承Thread类创建线程类，启动多线程："></a>继承Thread类创建线程类，启动多线程：</h2><p>1.定义Thread类的子类，重写run()方法<br>2.创建Thread子类的实例，也就是创建线程对象<br>3.调用线程对象的start()方法启动线程—new FirstThread().start();</p>
<p>tips:<br>①当线程继承Thread类时，直接用this可获得当前线程<br>②调用Thread的cuurentThread()方法获取当前线程<br>—-&gt;java默认的主线程，main()方法的方法体就是主线程的线程执行体</p>
<pre><code>public class firstThread extends Thread{
    private int i;
    //重写run方法，run方法的方法体就是线程执行体
    public void run(){
        for(;i&lt;100;i++){
            //当线程继承Thread类时，直接使用this就可以获得当前线程
            System.out.println(getName()+&quot; &quot;+i);
        }
    }
    public static void main(String[] args){
        for(;i&lt;100;i++){
            //用Thread.cuurentThread()方法获得当前线程
            System.out.println(Thread.cuurentThread().getName()+&quot; &quot;+i);
            if(i==20){
                new FirstThread().start();//启动第一个线程
                new FirstThread().start();//启动第二个线程
            }
        }
    }
}
</code></pre><hr>
<h2 id="实现Runnable接口创建线程类："><a href="#实现Runnable接口创建线程类：" class="headerlink" title="实现Runnable接口创建线程类："></a>实现Runnable接口创建线程类：</h2><p>1.定义Runnable接口的实现类，并重写该接口的run()方法<br>2.创建Runnable实现类的实例，并把实例作为Thread的target来创建Thread对象，这个Thread对象才是线程对象<br>3.调用线程对象的start()方法来启动线程</p>
<p>获得当前线程：只能用Thread.cuurentThread()方法</p>
<pre><code>public class secondThread implements Runnable{
private int i;
//重写run方法，run方法的方法体就是线程执行体
public void run(){
    for(;i&lt;100;i++){
        //当线程实现了Runnable接口，只能通过Thread.cuurentThread()
        System.out.println(Thread.cuurentThread().getName()+&quot; &quot;+i);
    }
}
public static void main(String[] args){
    for(;i&lt;100;i++){
        //用Thread.cuurentThread()方法获得当前线程
        System.out.println(Thread.cuurentThread().getName()+&quot; &quot;+i);
        if(i==20){

            SecondThread st = new SecondThread();
            new Thread(st,&quot;线程1&quot;).start();
            new Thread(st,&quot;线程2&quot;).start();
            }
        }
    }
}
</code></pre><h2 id="使用Callable和Future创建线程"><a href="#使用Callable和Future创建线程" class="headerlink" title="使用Callable和Future创建线程"></a>使用Callable和Future创建线程</h2><p>1.创建Callable接口实现类，实现call()方法，call()方法作为线程执行体，而且call()方法有返回值，再创建Callable实现类的实例<br>2.使用FutureTask类包装Callable对象，FutureTask对象封装了Callable对象的call()方法的返回值<br>3.使用FutureTask对象作为Thread对象的target创建并启动新线程<br>4.调用FutureTask对象的get()方法来获得子线程执行结束后的返回值</p>
<p>接口Callable()接口实现类，实现call()方法作为线程执行体<br>a.call()方法可以有返回值<br>b.call()方法可以声明抛出异常</p>
<pre><code>public class ThirdThread {
public static void main(String[] args){
//创建Callable对象
ThirdThread rt = new ThirdThread();
//创建Callable对象，使用FutureTask来包装Callable对象
FutureTask&lt;Integer&gt; task = new FutureTask&lt;integer&gt;((Callable&lt;integer&gt;)(){
    int i = 0;
    for(;i&lt;100;i++){
        //当线程实现了Runnable接口，只能通过Thread.cuurentThread()
        System.out.println(Thread.cuurentThread().getName()+&quot;的循环变量i的值： &quot;+i);
    }
    return i;
});


    for(int i = 0;i&lt;100;i++){

        System.out.println(Thread.cuurentThread().getName()+&quot;的循环变量i的值： &quot;+i);
        if(i==20){
            new Thread(task,&quot;有返回值的线程&quot;).start();
        }
    }
    try{
        System.out.println(&quot;子线程的返回值：&quot;+task.get());
    }catch(Exception e){
        ex.printStackTrace();
    }
}    
}
</code></pre><hr>
<h2 id="个人见解，仅供参考，如有错误，欢迎指正"><a href="#个人见解，仅供参考，如有错误，欢迎指正" class="headerlink" title=" 个人见解，仅供参考，如有错误，欢迎指正)"></a> <a href="2740327254@qq.com">个人见解，仅供参考，如有错误，欢迎指正)</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;线程和进程的概念&quot;&gt;&lt;a href=&quot;#线程和进程的概念&quot; class=&quot;headerlink&quot; title=&quot;线程和进程的概念&quot;&gt;&lt;/a&gt;线程和进程的概念&lt;/h2&gt;&lt;p&gt;了解多线程，首先我们需要了解什么是线程和进程。&lt;br&gt;进程：所有运行中的任务通常对应一个进程，一个进程里面最少有一个线程(主线程main)，&lt;br&gt;线程：进程的执行单元。在进程内，创建多条顺序执行流，这些顺序执行流就是线程，每个线程也是相互独立的。&lt;br&gt;    线程在程序中是独立的，并发的执行流。(并发性：指的是同一时刻只能有一条指令执行。&lt;br&gt;    并行性：指的是同一时刻，有多条指令在多个处理器上同时执行)&lt;br&gt;个人理解：一个QQ的运行是一个进程的运行，然后你在刷空间的时候可以听到背景音乐，就是多个线程在执行。&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
      <category term="多线程" scheme="https://github.com/can829/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="java" scheme="https://github.com/can829/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Html常用标签元素</title>
    <link href="https://github.com/can829/2017/07/18/Html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE%E5%85%83%E7%B4%A0-1/"/>
    <id>https://github.com/can829/2017/07/18/Html常用标签元素-1/</id>
    <published>2017-07-18T00:49:32.000Z</published>
    <updated>2017-07-18T01:14:51.947Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="1-常用HTML标签元素结合及简介"><a href="#1-常用HTML标签元素结合及简介" class="headerlink" title="  1.常用HTML标签元素结合及简介"></a>  1.常用HTML标签元素结合及简介</h2><a id="more"></a>
<pre><code>&lt;html&gt;&lt;/html&gt; 创建一个HTML文档
&lt;head&gt;&lt;/head&gt; 设置文档标题和其它在网页中不显示的信息
&lt;title&gt;&lt;/title&gt; 设置文档的标题        
&lt;h1&gt;&lt;/h1&gt; 最大的标题
&lt;pre&gt;&lt;/pre&gt; 预先格式化文本          
&lt;u&gt;&lt;/u&gt; 下划线
&lt;b&gt;&lt;/b&gt; 黑体字    
&lt;i&gt;&lt;/i&gt; 斜体字    
&lt;tt&gt;&lt;/tt&gt; 打字机风格的字体
&lt;cite&gt;&lt;/cite&gt; 引用,通常是斜体        
&lt;em&gt;&lt;/em&gt; 强调文本(通常是斜体加黑体)
&lt;strong&gt;&lt;/strong&gt; 加重文本(通常是斜体加黑体)
&lt;font size=&quot;&quot; color=&quot;&quot;&gt;&lt;/font&gt; 设置字体大小从1到7，颜色使用名字或RGB的十六进制值
&lt;BASEFONT&gt;&lt;/BASEFONT&gt; 基准字体标记
&lt;big&gt;&lt;/big&gt; 字体加大
&lt;SMALL&gt;&lt;/SMALL&gt; 字体缩小        
&lt;STRIKE&gt;&lt;/STRIKE&gt; 加删除线
&lt;CODE&gt;&lt;/CODE&gt; 程式码          
&lt;KBD&gt;&lt;/KBD&gt; 键盘字
&lt;SAMP&gt;&lt;/SAMP&gt; 范例    
&lt;VAR&gt;&lt;/VAR&gt; 变量
&lt;BLOCKQUOTE&gt;&lt;/BLOCKQUOTE&gt; 向右缩排
&lt;DFN&gt;&lt;/DFN&gt; 述语定义
&lt;ADDRESS&gt;&lt;/ADDRESS&gt; 地址标记
&lt;sup&gt;&lt;/SUP&gt; 上标字    
&lt;SUB&gt;&lt;/SUB&gt; 下标字
&lt;xmp&gt;...&lt;/xmp&gt;固定寬度字体(在文件中空白、換行、定位功能有效)
&lt;plaintext&gt;...&lt;/plaintext&gt;固定寬度字體(不執行標記符號)
&lt;listing&gt;...&lt;/listing&gt; 固定寬度小字體  
&lt;font color=00ff00&gt;...&lt;/font&gt;字體顏色
&lt;font size=1&gt;...&lt;/font&gt;最小字體  
&lt;font style =&apos;font-size:100 px&apos;&gt;...&lt;/font&gt;無限增大 
</code></pre><hr>
<h2 id="2-格式标志标签"><a href="#2-格式标志标签" class="headerlink" title=" 2.格式标志标签"></a> 2.格式标志标签</h2><pre><code>◆&lt;p&gt;&lt;/p&gt; 创建一个段落    
◆&lt;p align=&quot;&quot;&gt; 将段落按左、中、右对齐 　
◆&lt;br&gt; 换行 插入换行符  
&lt;blockquote&gt;&lt;/blockquote&gt; 从两边缩进文本
&lt;dl&gt;&lt;/dl&gt; 定义列表
&lt;dt&gt; 放在每个定义术语词前
&lt;dd&gt; 放在每个定义之前
&lt;ol&gt;&lt;/ol&gt; 创建一个标有数字的列表  
&lt;ul&gt;&lt;/ul&gt; 创建一个标有圆点的列表
&lt;li&gt; 放在每个列表项之前,若在&lt;ol&gt;&lt;/ol&gt;之间则每个列表项加上一个数字,
  若在&lt;ul&gt;&lt;/ul&gt;之间则每个列表项加上一个圆点 　 　
&lt;div align=&quot;&quot;&gt;&lt;/div&gt; 用来排版大块HTML段落,也用于格式化表
&lt;MENU&gt; 选项清单  
&lt;DIR&gt; 目录清单  
&lt;nobr&gt;&lt;/nobr&gt; 强行不换行
&lt;hr size=&apos;9&apos; width=&apos;80%&apos; color=&apos;ff0000&apos;&gt;水平線(設定寬度)  
&lt;center&gt;&lt;/center&gt; 水平居中  
链接标志表格标志
&lt;a href=&quot;URL&quot;&gt;&lt;/a&gt; 创建超文本链接  
&lt;a href=&quot;mailtEMAIL&quot;&gt;
&lt;/a&gt; 创建自动发送电子邮件的链接  
&lt;a name=&quot;name&quot;&gt;&lt;/a&gt; 创建位于文档内部的书签
&lt;a href=&quot;#name&quot;&gt;&lt;/a&gt; 创建指向位于文档内部书签的链接
&lt;BASE&gt; 文档中不能被该站点辨识的其它所有链接源的URL
&lt;LINK&gt; 定义一个链接和源之间的相互关系
</code></pre><hr>
<p>3.链接标记注解：</p>
<pre><code>◆target=&quot;...&quot;决定链接源在什么地方显示(用户自定义的名字，_blank,_parent,_self,_top
◆rel=&quot;...&quot;发送链接的类型  
◆rev=&quot;...&quot;保存链接的类型
◆accesskey=&quot;...&quot;指定该元素的热键
◆shape=&quot;...&quot;允许我们使用已定义的形状定义客户端的图形镜像(default，rect，circle，poly
◆coord=&quot;...&quot;使用像素或者长度百分比来定义形状的尺寸
◆tabindex=&quot;...&quot;使用定义过的tabindex元素设置在各个元素之间的焦点获取顺序(使用tab键使元素获得焦点)
</code></pre><hr>
<p>参考内容：<br>     <a href="http://www.divcss5.com/html/h323.shtml" target="_blank" rel="external">http://www.divcss5.com/html/h323.shtml</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;1-常用HTML标签元素结合及简介&quot;&gt;&lt;a href=&quot;#1-常用HTML标签元素结合及简介&quot; class=&quot;headerlink&quot; title=&quot;  1.常用HTML标签元素结合及简介&quot;&gt;&lt;/a&gt;  1.常用HTML标签元素结合及简介&lt;/h2&gt;
    
    </summary>
    
    
      <category term="html" scheme="https://github.com/can829/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>娱乐</title>
    <link href="https://github.com/can829/2017/07/14/photo/"/>
    <id>https://github.com/can829/2017/07/14/photo/</id>
    <published>2017-07-14T02:48:04.000Z</published>
    <updated>2017-07-14T10:17:19.013Z</updated>
    
    <content type="html"><![CDATA[<p>你就说你想不想看里面是什么~<br><a id="more"></a></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=25706282&auto=0&height=66"><br></iframe><br>    没错，就是一张图片而已·哈哈哈哈<br>    <img src="/images/1.jpg" alt="“美不美”"><br><br><br>    接下来看看一段视频，听歌放松一下~嘻嘻<br><br>    Idina Menze和Caleb Hyles激情对唱Let It Go：<br><br><iframe height="498" width="510" src="http://player.youku.com/embed/XNjcyMDU4Njg0" frameborder="0" allowfullscreen><br></iframe>  ]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你就说你想不想看里面是什么~&lt;br&gt;
    
    </summary>
    
    
      <category term="黑魔法" scheme="https://github.com/can829/tags/%E9%BB%91%E9%AD%94%E6%B3%95/"/>
    
      <category term="娱乐" scheme="https://github.com/can829/tags/%E5%A8%B1%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>小可爱</title>
    <link href="https://github.com/can829/2017/07/13/%E5%B0%8F%E5%8F%AF%E7%88%B1/"/>
    <id>https://github.com/can829/2017/07/13/小可爱/</id>
    <published>2017-07-13T12:40:27.000Z</published>
    <updated>2017-07-14T10:43:40.215Z</updated>
    
    <content type="html"><![CDATA[<p>难道我不是你的小可爱了么，伦家这么可爱的呢？<br><a id="more"></a><br>    wa~哇(；′⌒`)，终于好看一点了，而且能写东西了，真的是不费我这几天的苦心。正所谓，失败乃成功的妈妈。失败了一次才能运行，没有爆炸，也是实在不易的。<br><br>    一开始，出师未捷身先死，我的眼泪哗哗流啊~，第一次蠢到去改HTML的源代码，知道两个东西，以为自己拥有了世界，真的太天真了，后来在大神的指导下，走向了正规。<br><br>    哈哈，测试OK，终归开心的要死。对于一个小白，学习能力还超级差的人来说，我是真的不容易的，心疼自己一秒。比个心❤<br><br>    之后要开始去学习markdown了，这样才能更好地写我的house，(<em>^__^</em>) 嘻嘻……<br><br>    希望能坚持到下去，据说后面超级难(害怕weiqu。。。<br><br>    (坏笑，赏一个咯，截图扫二维码，长按的功能还没实现，略略略</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;难道我不是你的小可爱了么，伦家这么可爱的呢？&lt;br&gt;
    
    </summary>
    
    
      <category term="黑魔法" scheme="https://github.com/can829/tags/%E9%BB%91%E9%AD%94%E6%B3%95/"/>
    
      <category term="奇淫技巧" scheme="https://github.com/can829/tags/%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
</feed>
